def print_ext_addr(addr):
    print_data([2, 0, 0, 4, (addr >> 8) & 0xff, addr & 0xff])

def print_data(data):
    hex_data = ''.join(["%02X" % d for d in data])
    checksum = (-sum(data)) & 0xff
    print(":%s%02X" % (hex_data, checksum))

def print_binary(op, offset, opts={}):
    mask = 0x0f if opts.get('high') else 0xf0
    mask = 0 if opts.get('pass') else mask
    for a in range(16):
        for b in range(16):
            d = [((b << 4) + c) & 0xff | (b & mask) for c in range(16)]
            if op == '/' and a == 0:
                d = [x % 10 for x in d]
            else:
                d = [((x.__truediv__(a << 4) if op == '/' else a << 4) & 0xff) | (x & mask) for x in d]
            print_data([len(d), offset + a, b << 4, 0] + d)

def print_unary(offset, r):
    for a in range(0, 0xF1, 0x10):
        print_data([0x10, offset, a, 0] + r[a:a+0xF+1])

PARITY = [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1]
def print_af(offset, opts={}):
    for a in range(16):
        for b in range(16):
            d = [0] * 16
            for c in range(16):
                if opts.get('high'):
                    carry = (b - (c >> 3)) < a
                    r = c & 9
                    r |= 0x80 if carry
                    r |= 0x40 & (b << 3)
                    r |= 0x20 if c & 4 != 0 and b == 0
                    r |= (PARITY[b] ^ ((c >> 1) % 2) ^ 1) << 4
                    r |= 4 if ((b & 7) < (a & 7)) ^ (b < a)
                    r |= 2 unless carry or ((c & 1) == 1 and a == 0)
                else:
                    r = b << 4
                    r |= 8 if c < a
                    r |= 4 if c == 0
                    r |= PARITY[c] << 1
                    r |= 1 if a == 0
                d[c] = r
            print_data([len(d), offset + a, b << 4, 0] + d)

MAX_VOICE = 13

def print_wav(offset, opts={}):
    h = [[math.sin(i * math.pi / (128.0 / (n + 1))) for i in range(256)] for n in range(16)]
    for a in range(16):
        if opts.get('high'):
            m = 0 if a == 0 else 2.0 ** (a / 4.0 - 5.75)
            data = [(int(i * m) & 0xFF) for i in range(256)]
        else:
            if a > MAX_VOICE:
                data = [random.randint(0, 255) for _ in range(256)]
            else:
                w = [sum(h[j][i] / (k + 1) if a % 2 == 0 or k % 2 != 0 else 0 for j, k in enumerate(range(a + 1))) for i in range(256)]
                s = 127.5 / max(w)
                data = [(int(i * s) & 0xFF) for i in w]
        for b, d in enumerate(zip(*[iter(data)] * 16)):
            print_data([len(d), offset + a, b << 4, 0] + list(d))

ML2SYNC_PG = [3,8,1,4,7,9,2,4,7,9,2,2,4,7,9,0].freeze
ML2LEN = [5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3].freeze
IDLE_PG = 0x00
NOP_PG = 0x90
I8080 = [
  0x90,1, 0x97,2, 0xA1,1, 0xB3,1, 0xAF,2, 0xB1,2, 0x95,1, 0xC3,1,
  0xDF,2, 0xB5,2, 0xA0,1, 0xB4,1, 0xAF,2, 0xB1,2, 0x95,1, 0xC4,1,
  0x91,1, 0x97,2, 0xA1,1, 0xB3,1, 0xAF,2, 0xB1,2, 0x95,1, 0xC5,2,
  0xD3,2, 0xB5,2, 0xA0,1, 0xB4,1, 0xAF,2, 0xB1,2, 0x95,1, 0xC6,2,
  0xE1,2, 0x97,2, 0x9D,3, 0xB3,1, 0xAF,2, 0xB1,2, 0x95,1, 0xB6,2,
  0xE2,1, 0xB5,2, 0x9A,3, 0xB4,1, 0xAF,2, 0xB1,2, 0x95,1, 0xC7,1,
  0xE1,2, 0x97,2, 0x99,2, 0xB3,1, 0xB0,2, 0xB2,2, 0x96,2, 0xC9,1,
  0xE3,1, 0xB5,2, 0x98,2, 0xB4,1, 0xAF,2, 0xB1,2, 0x95,1, 0xC8,1,
  0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1,
  0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1,
  0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1,
  0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1,
  0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1,
  0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1,
  0x94,1, 0x94,1, 0x94,1, 0x94,1, 0x94,1, 0x94,1, 0x92,1, 0x94,1,
  0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1, 0x93,1,
  0xA3,1, 0xA3,1, 0xA3,1, 0xA3,1, 0xA3,1, 0xA3,1, 0xA4,1, 0xA3,1,
  0xA6,2, 0xA6,2, 0xA6,2, 0xA6,2, 0xA6,2, 0xA6,2, 0xA7,2, 0xA6,2,
  0xA9,1, 0xA9,1, 0xA9,1, 0xA9,1, 0xA9,1, 0xA9,1, 0xAA,1, 0xA9,1,
  0xAC,2, 0xAC,2, 0xAC,2, 0xAC,2, 0xAC,2, 0xAC,2, 0xAD,2, 0xAC,2,
  0xB7,2, 0xB7,2, 0xB7,2, 0xB7,2, 0xB7,2, 0xB7,2, 0xB8,2, 0xB7,2,
  0xBD,1, 0xBD,1, 0xBD,1, 0xBD,1, 0xBD,1, 0xBD,1, 0xBE,1, 0xBD,1,
  0xBA,1, 0xBA,1, 0xBA,1, 0xBA,1, 0xBA,1, 0xBA,1, 0xBB,1, 0xBA,1,
  0xC0,1, 0xC0,1, 0xC0,1, 0xC0,1, 0xC0,1, 0xC0,1, 0xC1,1, 0xC0,1,
  0xD0,2, 0xD7,2, 0xCB,1, 0xCA,2, 0xCD,2, 0xD5,2, 0xA5,2, 0xD2,1,
  0xD1,2, 0xD0,2, 0xCB,1, 0xCC,1, 0xCE,2, 0xCD,2, 0xA8,2, 0xD2,1,
  0xD0,2, 0xD7,2, 0xCB,1, 0xDD,2, 0xCD,2, 0xD5,2, 0xAB,2, 0xD2,1,
  0xD1,2, 0xCF,2, 0xCB,1, 0xDC,2, 0xCE,2, 0x01,1, 0xAE,2, 0xD2,1,
  0xD0,2, 0xD7,2, 0xCB,1, 0xDA,3, 0xCD,2, 0xD5,2, 0xB9,2, 0xD2,1,
  0xD1,2, 0xD4,1, 0xCB,1, 0xA2,2, 0xCE,2, 0x02,2, 0xBF,2, 0xD2,1,
  0xD0,2, 0xD8,2, 0xCB,1, 0xE0,1, 0xCD,2, 0xD6,2, 0xBC,2, 0xD2,1,
  0xD1,2, 0xDB,1, 0xCB,1, 0xE0,1, 0xCE,2, 0x03,3, 0xC2,2, 0xD2,1,
]
EXT = [
  0x90,1, 0x04,2, 0x05,1, 0x06,2, 0x07,1, 0x08,1, 0x09,1, 0x0A,1,
  0x0B,2, 0x0C,2, 0x0D,2, 0x0E,1, 0x0F,2, 0x18,2, 0x19,2, 0x1A,2,
  0x1B,2, 0x1C,2, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x20,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x30,3, 0x30,3, 0x30,3, 0x30,3, 0x32,1, 0x32,1, 0x32,1, 0x32,1,
  0x31,2, 0x31,2, 0x31,2, 0x31,2, 0x32,1, 0x32,1, 0x32,1, 0x32,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x28,1, 0x28,1, 0x28,1, 0x28,1, 0x28,1, 0x28,1, 0x28,1, 0x28,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
  0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1, 0x90,1,
]
EXTNOP1_PG = 0x10
EXTNOP2_PG = 0x11
EXTNOP_PC = 0x04
EXTDISP = [
  0x0000,0, 0x100C,2, 0x1036,3, 0x0000,0, 0x0000,0, 0x0000,0, 0x1080,2, 0x0000,0,
  0x0000,0, 0x0000,0, 0x10B8,2, 0x10A4,2, 0x10B8,2, 0x0000,0, 0x0000,0, 0x0000,0,
  0x110C,2, 0x1136,2, 0x115A,2, 0x117C,2, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0,
  0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0, 0x0000,0
]

def print_disp(offset, opts={}):
    for a in range(16):
        for b in range(16):
            if opts.get('high'):
                d = [0xF0 + ML2SYNC_PG[c] if b & 3 == 0 else (IDLE_PG if b & 3 < (I8080[1] if b & 4 == 0 else EXT[1]) else I8080[0]) for c in range(16)]
            else:
                d = [a | (0x40 if a != 0 else 0) if c & 7 == 0 else a | (c << 4) | (0x40 if c & 8 != 0 else 0) for c in range(16)]
            print_data([len(d), offset + a, b << 4, 0] + d)

VID = [[[480,10,2,33], [160,4,11], [(0..2)], [4,2,4,8],
        [[2], [3], [4], [8]], [[0], [1], [2], [4]]],
       [[480,1,3,28], [120,1,7], [(3..6),(7..10)], [1,3,5,4],
        [[2,4], [3,6], [5,10], [8,16]], [[0,0], [1,3], [1,5], [4,6]]],
       [[600,1,4,35], [148,4,8], [(3..6),(7..10)], [1,3,5,4],
        [[2,4], [3,6], [5,10], [8,16]],  [[0,0], [1,3], [1,5], [4,6]]],
       [[768,3,6,28], [152,5,4], [(11..15)], [4,4,8,16],
        [[4], [5], [8], [16]], [[0], [1], [4], [6]]]]
PAT = [[10,11,11,10], [10,11], [12,13,14,15], [12,13,13,14,15,15],
       [0,1,2,3,4,5,6,7], [0,1,2,3,4,5,6,7,8,9],
       [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]]
def print_vid(offset):
    rom = [[0xFF] * 0x100 for _ in range(16)]
    a = 0
    x = [176, 176, 176, 162]
    y = [199, 199, 207, 199]
    for z, v in enumerate(VID):
        for i, c in enumerate(v[4]):
            m = 0
            for j, d in enumerate(c):
                pat = PAT[v[5][i][j]]
                n = sum(v[0])
                p = 0
                t = 0
                for k, b in enumerate(v[1]):
                    for _ in range(b):
                        q = p % v[3][i]
                        w = x[z] + q if k == 0 else (y[z] + m if k == 1 else 0xFF)
                        if rom[a][p] == 0xFF:
                            rom[a][p] = w
                        else:
                            exit("Conflict!")
                        for r in v[2][j]:
                            s = 0x20 if t >= n[1] and t < n[2] else 0
                            if t < n[0]:
                                s |= 0x40
                                s |= pat[t % len(pat)]
                                s |= 0x80 if t % d == 0 else 0
                            else:
                                s |= 9
                            if rom[r][w] == 0xFF:
                                rom[r][w] = s
                            else:
                                exit("Conflict!")
                            t += 1
                        p += 1
                rom[a][p] = 0
                x[z] += v[3][i]
                y[z] += m
                a += 1
    for j, a in enumerate(rom):
        for i, b in enumerate(zip(*[iter(a)] * 16)):
            print_data([len(b), offset + j, i << 4, 0] + list(b))

def print_com(offset):
    for a in range(16):
        ps2clk = a >> 3
        ps2rx = (a >> 2) & 1
        rx = a & 1
        for b in range(16):
            sd = format(b, '04b')
            sd = int(''.join([str(rx), sd[3], sd[1], "0000"]), 2)
            sd = 0xF0 if sd == 0x70
            d = [sd + ((c >> 2) & 3) + ((c & 3) + 1) % 4 for c in range(16)]
            print_data([len(d), offset + a, b << 4, 0] + d)

NEXT_LINE = [0x10, 0x20, 0x00,
       0x40, 0x50, 0x60, 0x30,
       0x80, 0x90, 0xA0, 0x70,
 0xC0, 0xD0, 0xE0, 0xF0, 0xB0]
def inc_line():
    return [NEXT_LINE[i >> 4] | (i & 8) for i in range(256)]

def inc_block():
    return [NEXT_BLOCK[i >> 4] | (i & 8) for i in range(256)]

def fork_intr():
    result = []
    for i in range(256):
        if i & 0x04 != 0:
            result.append(0xA0)
        elif i & 0x02 != 0:
            result.append(0x80)
        elif i & 0x01 != 0:
            result.append(0x60)
        elif i & 0x08 != 0:
            result.append(0x40)
        else:
            result.append(0x20)
    return result


def rxstate_mulmode():
    result = []
    for i in range(256):
        if i & 0x20 == 0:
            if i & 2 == 0:
                result.append(0x24)
            else:
                if i & 1 == 0:
                    result.append(0x46)
                else:
                    result.append(0x86)
        else:
            if i & 0x10 == 0:
                result.append(0x26)
            else:
                result.append(0x42)
    return result


def swap_carry():
    return [(i & 0x7D) | ((i & 0x80) >> 6) | ((i & 2) << 6) for i in range(256)]


def da_carry():
    return [8 if i & 0xF > 9 else 0x80 if i & 0xF0 > 0x90 else 0 for i in range(256)]


def flags_psw(i8085=False):
    result = []
    for i in range(256):
        r = 0 if i8085 else 2
        r |= 0x80 if i & 0x40 != 0 else 0
        r |= 0x40 if i & 0x20 != 0 else 0
        r |= 0x20 if i8085 and ((i & 0x40 == 0) ^ (i & 0x04 == 0)) else 0
        r |= 0x10 if i & 8 != 0 else 0
        r |= 4 if i & 0x10 != 0 else 0
        r |= 2 if not i8085 or i & 0x04 != 0 else 0
        r |= 1 if i & 0x80 != 0 else 0
        result.append(r)
    return result


def psw_flags():
    return [0x80 if i & 1 != 0 else 0x40 if i & 0x80 != 0 else 0x20 if i & 0x40 != 0 else 0x10 if i & 4 != 0 else
            8 if i & 0x10 != 0 else 4 if i & 0x02 != 0 else 0 for i in range(256)]


def note(opts={}):
    result = []
    for t in [412500.0 / 43.0, 1375000.0 / 131.0]:
        for m in range(128):
            f = 440.0 * 2.0 ** ((m - 69) / 12.0)
            n = round(65536.0 * f / t)
            n >>= 8 if opts.get('high') else 0
            result.append(0 if f > t / 2 else n & 0xFF)
    return result


def wave():
    result = []
    for t in [412500.0 / 43.0, 1375000.0 / 131.0]:
        l = [t / ((i + 2) * 2) for i in range(MAX_VOICE)]
        for n in range(128):
            f = 440.0 * 2.0 ** ((n - 69) / 12.0)
            result.extend([1 if i > f else 0 for i in l])
    return result


def kmode_mask():
    return [0b00001 if code == 0x12 or code == 0x59 else 0b00010 if code == 0x11 else 0b00100 if code == 0x14 else 0x80
            for code in range(256)]


def ctrl_alt_page():
    return [0x81 if code == 0x6C or code == 0x7D else 0x82 if code == 0x71 else 0 for code in range(128)]


def mod_pcm():
    result = []
    for i in range(256):
        j = (i >> 2) & 0xC | (i & 3)
        if i & 0x44 == 0x00:
            result.append(EXPAND[j])
        elif i & 0x44 == 0x04:
            result.append((i + 0x10) & 0x3F)
        elif i & 0x44 == 0x40:
            result.append(FORKPCM[j])
        else:
            result.append(0)
    return result


def ext_map_high():
    return [0x8E + 7 * (i & 3) if i in [0x20, 0x21, 0x22, 0x23] else 0x8C + 7 * (i & 3) if i in [0x29, 0x2A, 0x2B]
            else 0x91 + 7 * (i & 3) if i in [0x24, 0x25, 0x26, 0x27, 0x2C, 0x2D, 0x2E, 0x2F] else 0 for i in range(256)]


def ext_map_low():
    return [0xC4 + (i & 3) if i in [0x20, 0x21, 0x22, 0x23, 0x2C, 0x2D, 0x2E, 0x2F] else 0xC0 + (i & 3) if i in
            [0x24, 0x25, 0x26, 0x27] else 0 for i in range(256)]

