# Input from port
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE IN_PG

# assume: Y = $VMS
LD HL, $KERN?$NULL
LDZ Y, $EO
FNH DZ, HLA               # A=0 if kern
LD HL, $INC$FORK1
LD Y, $PCL
#10/9
LDN PC, $EXIT12           # exit if not kern
FNFH DZ, XD               # X,PCL = PCL+1
FNDL A, PC
#17/15

ADDR 0x10                 # PORT0
LD Y, $AREG
FNFH IZ, ND               # I0->acc
LD PC, $EXIT35
#35

ADDR 0x16                 # PORT1
LD Y, $AREG
FNFH IZ, O1D              # I1->acc
LD PC, $EXIT35
#35

ADDR 0x1C                 # PORT2
LD Y, $AREG
FNFH IZ, O2D              # I2->acc
LD PC, $EXIT35
#35

ADDR 0x22                 # PORT3
LD Y, $AREG
FNFH IZ, O3D              # I3->acc
LD PC, $EXIT35
#35

ADDR 0x28                 # PORT4
LD Y, $AREG
FNFH IZ, O4D              # I4->acc
LD PC, $EXIT35
#35

ADDR 0x2E                 # PORT5
LD Y, $AREG
FNFH IZ, O5D              # I5->acc
LD PC, $EXIT35
#35

ADDR 0x34                 # PORT6
LD Y, $AREG
FNFH IZ, O6D              # I6->acc
LD PC, $EXIT35
#35

ADDR 0x3A                 # PORT7
LD Y, $AREG
FNFH IZ, O7D              # I7->acc
LD PC, $EXIT35
#35

ADDR 0x40
NOP
NOP
$RX30
LD HL, $2COM$NULL
LDZ Y, $RXWRIDX
FNH DZ, HL                # HL=-rx write index
LD Y, $RXRDIDX
ADDHL DZ, NA              # A=rx read-rx write index
LDP PC, $RXEX44           # exit if rx read >= rx write
LD HL, $RXBUFF
LD PC, $CONT47
#47/17

$KC30                     # Keyboard Code
LD HL, $2COM$NULL
LDZ Y, $KCWRIDX
FNH DZ, HL                # HL=-kc write index
LD Y, $KCRDIDX
ADDHL DZ, NA              # A=kc read-kc write index
LD HL, $KCBUFF
LDP PC, $EXIT46           # exit if kc read >= kc write
LD PC, $CONT47
#47/32

$KS30
LD HL, $2COM$NULL
LDZ Y, $KSWRIDX
FNH DZ, HL                # HL=-ks write index
LD Y, $KSRDIDX
ADDHL DZ, NA              # A=ks read-ks write index
LD HL, $KSBUFF
LDP PC, $EXIT46           # exit if ks read >= ks write
LD PC, $CONT47
#47/47

ADDR 0x70                 # Kbd code
LD PC, $KC30
#30

ADDR 0x74                 # Kbd scan
LD PC, $KS30
#30

$RXEX44                   # buffer empty, turn on thread to refill
LD HL, $0x20
LD Y, $RMODE
ORHL DZ, ND               # Enable Rx thread
LD PC, $EXIT54
#54/14

ADDR 0x80                 # PCL = 255, inc PCH
LDZ Y, $PCH
FNH DZ, HLD               # PCH = PCH+1      *** inc PCH ***
#21/3
LD HL, $IDEN$FORKP
FNH A, Y                  # Y = PCH
FNDL M, PC                # fork on port [PC]
#28/8

ADDR 0x88                 # NOP
NOP
FNH A, HLA                # NOP
MVHL A, NA                # NOP
$EXIT35
LD HL, $INC$NULL
LDZ Y, $VMS               # set Y = $VMS on exit
FNH DZ, HLD
LD PC, $FETCH1_PG         # cycle available, goto fetch
#43/19

$EXIT12
FNH DZ, HLD               # PCL = PCL+1
LD HL, $ZERO?$NULL
FNH A, HLA
LDP HL, $INC$NULL
LDN HL, $IDEN$NULL
#21/27
LDZ Y, $PCH
FNH DZ, HLD
LD HL, $0
LD Y, $AREG
#29/34
MVHL AZ, ND               # 0->Acc
LD PC, $EXIT35
#35/38

$EXIT46
MVHL A, NA                # NOP
MVHL A, NA                # NOP
$EXIT54
MVHL A, NA                # NOP
MVHL A, NA                # NOP
LD HL, $0
LD Y, $AREG
MULH AZ, ND               # 0->Acc
$EXIT69
NOP
#70/53
MVHL A, NA                # NOP
LD HL, $INC2$NULL
LDZ Y, $VMS               # set Y = $VMS on exit
FNH DZ, HLD               # VMS+2
#80/60
LD HL, $FETCH
DISHL DZ, PGA             # jump to next VMC
#86/64

ADDR 0xC0                 # else, iden PCH, iden PCH
FNH A, HLA                # NOP
LD HL, $IDEN$FORKP
LDZ Y, $PCH
FNH DZ, Y                 # Y = PCH
FNDL M, PC                # fork on port [PC]
#28/8

ADDR 0xC8                 # Read from zpage
LD HL, $0x3F
#30/10
ANDHL M, NA               # A = [PC]&0x3F
LD HL, $0x80
ORHL A, YA                # Y = A|0x80
#40/16
LD HL, $IDEN$NULL
FNH DZ, HLA               # A = Z[Y]
LD HL, $IDEN$NULL
LD Y, $AREG
FNH AZ, HLD               # A -> Acc
#50/24
NOP
NOP
LD PC, $EXIT54
#54/28

$CONT47
MVHL A, XA                # X=buff addr
LDZ HL, $INC$NULL
FNH DZ, HLD               # read index+1
LD HL, $IDEN$DEC
FNFL A, Y                 # Y=read index-1
#60
FNFH D, NA                # A=char
LD Y, $AREG
FNH AZ, HLD               # char->Acc
LD PC, $EXIT69
#69
