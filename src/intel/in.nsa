# Input from port
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE IN_PG
$FORKP 0

# assume: Y = $VMS
LD HL, $KERN?$NULL
LD Y, $EO
FNCH DZ, NA               # A=0 if kern
LD HL, $INC$FORK1
LD Y, $PCL
#11/10
LDNZ PC, $EXIT13          # exit if not kern
FNFH DZ, XD               # X,PCL = PCL+1
FNDL A, PC
#18/16

ADDR 0x10                 # PORT0
LD Y, $AREG
FNFH IZ, ND               # I0->acc
NOP
$EXIT35
LD HL, $INC$NULL
LDZ Y, $VMS                # set Y = $VMS on exit
FNH DZ, HLD
LD PC, $FETCH1_PG         # cycle available, goto fetch
#43/12

ADDR 0x1C                 # PORT1
LD Y, $AREG
FNFH IZ, O1D              # I1->acc
NOP
LD HL, $INC$NULL
LDZ Y, $VMS                # set Y = $VMS on exit
FNH DZ, HLD
LD PC, $FETCH1_PG         # cycle available, goto fetch
#43/12

ADDR 0x28                 # PORT2
LD Y, $AREG
FNFH IZ, O2D              # I2->acc
NOP
LD HL, $INC$NULL
LDZ Y, $VMS                # set Y = $VMS on exit
FNH DZ, HLD
LD PC, $FETCH1_PG         # cycle available, goto fetch
#43/12

ADDR 0x34                 # PORT3
LD Y, $AREG
FNFH IZ, O3D              # I3->acc
NOP
LD HL, $INC$NULL
LDZ Y, $VMS                # set Y = $VMS on exit
FNH DZ, HLD
LD PC, $FETCH1_PG         # cycle available, goto fetch
#43/12

ADDR 0x40                 # PORT4
LD Y, $AREG
FNFH IZ, O4D              # I4->acc
NOP
LD HL, $INC$NULL
LDZ Y, $VMS                # set Y = $VMS on exit
FNH DZ, HLD
LD PC, $FETCH1_PG         # cycle available, goto fetch
#43/12

ADDR 0x4C                 # PORT5
LD Y, $AREG
FNFH IZ, O5D              # I5->acc
NOP
LD HL, $INC$NULL
LDZ Y, $VMS                # set Y = $VMS on exit
FNH DZ, HLD
LD PC, $FETCH1_PG         # cycle available, goto fetch
#43/12

ADDR 0x58                 # PORT6
LD Y, $AREG
FNFH IZ, O6D              # I6->acc
NOP
LD HL, $INC$NULL
LDZ Y, $VMS                # set Y = $VMS on exit
FNH DZ, HLD
LD PC, $FETCH1_PG         # cycle available, goto fetch
#43/12

ADDR 0x64                 # PORT7
LD Y, $AREG
FNFH IZ, O7D              # I7->acc
NOP
LD HL, $INC$NULL
LDZ Y, $VMS                # set Y = $VMS on exit
FNH DZ, HLD
LD PC, $FETCH1_PG         # cycle available, goto fetch
#43/12

ADDR 0x70
LD PC, $KC31
#31

ADDR 0x74
MVHL A, NA                # NOP
LD PC, $EXIT35
#35

ADDR 0x78
LD PC, $KS31
#31

$EXIT45
MVHL A, NA                # NOP
MVHL A, NA                # NOP
LD PC, $EXIT55
#55

ADDR 0x80                 # PCL = 255, inc PCH
LDZ Y, $PCH
#20/2
FNH DZ, HLD               # PCH = PCH+1      *** inc PCH ***
LD HL, $IDEN$FORKP
FNH A, Y                  # Y = PCH
FNCL M, PC                # fork on port [PC]
#29/8

ADDR 0x88
NOP
NOP
$RX31
LD HL, $2COM$NULL
LDZ Y, $RXWRIDX
FNH DZ, HL                # HL=-rx write index
LD Y, $RXRDIDX
#39
ADDHL DZ, NA              # A=rx read-rx write index
LDP PC, $RXEX45           # exit if rx read >= rx write
LD HL, $RXBUFF
LD PC, $CONT48
#48

$RXEX45                   # buffer empty, turn on thread to refill
LD HL, $0x20
LD Y, $RMODE
ORHL DZ, ND               # Enable Rx thread
LD PC, $EXIT55
#55

$KC31                     # Keyboard Code
LD HL, $2COM$NULL
LDZ Y, $KCWRIDX
FNH DZ, HL                # HL=-kc write index
LD Y, $KCRDIDX
#39
ADDHL DZ, NA              # A=kc read-kc write index
LDP PC, $EXIT45           # exit if kc read >= kc write
LD HL, $KCBUFF
LD PC, $CONT48
#48

$KS31
LD HL, $2COM$NULL
LDZ Y, $KSWRIDX
FNH DZ, HL                # HL=-ks write index
LD Y, $KSRDIDX
#39
ADDHL DZ, NA              # A=ks read-ks write index
LDP PC, $EXIT45           # exit if ks read >= ks write
LD HL, $KSBUFF
LD PC, $CONT48
#48

ADDR 0xC0                 # else, iden PCH, iden PCH
FNH A, HLA                # NOP
LD HL, $IDEN$FORKP
LDZ Y, $PCH
FNH DZ, Y                 # Y = PCH
FNCL M, PC                # fork on port [PC]
#29/8

$CONT48
MVHL A, XA                # X=buff addr
LDZ HL, $INC$NULL
FNH DZ, HLD               # read index+1
LD HL, $IDEN$DEC
FNFL A, Y                 # Y=read index-1
#61
FNFH D, NA                # A=char
LD Y, $AREG
FNH AZ, HLD               # char->Acc
LD PC, $EXIT70
#70

$EXIT55
MVHL A, NA                # NOP
MVHL A, NA                # NOP
LD HL, $0
LD Y, $AREG
MULH AZ, ND               # 0->Acc
$EXIT70
MVHL A, NA                # NOP
LD HL, $INC2$NULL
LDZ Y, $VMS               # set Y = $VMS on exit
FNH DZ, HLD               # VMS+2
#80|37
LD HL, $FETCH
DISHL DZ, PGA             # jump to next VMC
#86|43

$EXIT13
FNH DZ, HLD               # PCL = PCL+1
LD HL, $OVER?$NULL
FNH A, HLA
#19
LDP HL, $INC$NULL
LDN HL, $IDEN$NULL
LDZ Y, $PCH
FNH DZ, HLD
LD HL, $0
LD Y, $AREG
#30
MULH AZ, ND               # 0->Acc
LD PC, $EXIT35
#35
