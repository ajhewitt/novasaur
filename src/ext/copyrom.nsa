# Copy ROM to memory - one byte per cycle, fetch when done
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE COPYROM_PG

#TEMP: X (RAM index)
#DREG: Y (RAM page)
#CREG: count (number of pages+1 to copy)
#TMLH: ROM jump PC=0x80+H*8
#TMPL: H/2 of ROMH, inc by 8 if -ve
#assume Y=$VMS
LDZ HL, $INC2$NULL
FNH DZ, HLD               # VMS+2
LD HL, $IDEN$LSL
LD Y, $TEMP
FNFH DZ, XA               # index->X,A
#11
LDZ Y, $TMPH
FNH DZ, PC                # jump to read rom, A=index, L=LSL
$CONT24
MVHL A, NA                # HL->A return value from ROM
LD HL, $IDEN$NULL
#31
LDZ Y, $DREG
FNH DZ, Y                 # page->Y
FNFH A, NM                # A->[Y,X]
LD HL, $INC$NULL
#40
LDZ Y, $TEMP
FNH DZ, HLD               # index+1->index
LD HL, $ZERO?$NULL
FNH A, HLA                # check if X>255
LDN PC, $EXIT50
#49
LD HL, $INC$NULL
LDZ Y, $DREG
FNH DZ, HLD               # ram page+1
LD HL, $0x80
LD Y, $TMPL
#59
ADDH DZ, ND               # rom page+8
LDP PC, $EXIT64
MULH DZ, ND               # 0->rom page
LD Y, $TMPH
ADDH DZ, ND               # rom PC+8
#71
LD HL, $DEC$NULL
LDZ Y, $CREG
FNH DZ, HLD               # page count-1
LDP HL, $COPYROM_INST     # continue if more pages
LDN HL, $FETCH            # fetch if done
#80
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#86

$EXIT50
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
#60
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
#70
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
LD HL, $COPYROM_INST      # continue if more pages
#80
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#86

$EXIT64
NOP
NOP
NOP
NOP
NOP
NOP
#70
NOP
LD HL, $DEC$NULL
LDZ Y, $CREG
FNH DZ, HLD               # page count-1
LDP HL, $COPYROM_INST     # continue if more pages
LDN HL, $FETCH            # fetch if done
#80
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#86

ADDR 0x80
LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROM0H A, HL               # ROM0(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROM1H A, HL               # ROM1(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROM2H A, HL               # ROM2(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROM3H A, HL               # ROM3(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROM4H A, HL               # ROM4(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROM5H A, HL               # ROM5(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROM6H A, HL               # ROM6(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROM7H A, HL               # ROM7(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROM8H A, HL               # ROM8(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROM9H A, HL               # ROM9(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROMAH A, HL               # ROMA(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROMBH A, HL               # ROMB(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROMCH A, HL               # ROMC(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROMDH A, HL               # ROMD(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROMEH A, HL               # ROME(A,H)->HL
LD PC, $CONT24

LD Y,  $TMPL
FNFL DZ, HL               # rom page<<1->H
ROMFH A, HL               # ROMF(A,H)->HL
LD PC, $CONT24
