# Receive record with ECC - one byte per 2-cycle, fetch when done
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE DSKRECV_PG

#AREG: buffer index, init 0
#CREG: checksum, init 0
#DREG: RAM page
#EREG: RAM X index
#HREG: ECC code 0
#LREG: ECC code 1
LDZ HL, $INC2$NULL
FNH DZ, HLD                # VMS+2
LD HL, $IDEN$IDEN
LD Y, $CTX0
FNFL DZ, X                 # X = context col
#11
LDZ Y, $AREG
FNH DZ, Y                  # Y = row
FNFH D, NA                 # data = [Y,X]
LD Y, $EREG
#20
FNFL DZ, X                 # X = Ereg
LDZ Y, $DREG
FNH DZ, Y                  # Y = Dreg
FNFH A, HLM                # data -> [Y,X], HL
#30
LD Y, $CREG
ADDHL DZ, ND               # Creg = data+Creg
LD Y, $HREG
XORHL DZ, ND               # Hreg = data^Hreg
#42
LD Y, $LREG
XORHL DZ, NA               # A = data^Lreg
LD HL, $LFSR$NULL
#50
FNCH AZ, ND                # LFSR(A) -> Lreg
NOP
LD HL, $INC$NULL
LDZ Y, $EREG
FNH DZ, HLD                # Ereg++
#60
LD HL, $ZERO?$NULL
FNH A, HLA                 # Ereg == 0?
LDP HL, $INC$NULL
LDN HL, $IDEN$NULL
LDZ Y, $DREG
FNH DZ, HLD                # Dreg++
#71
LD HL, $INC$NULL
LDZ Y, $AREG
FNH DZ, HLD                # Areg++
LDP HL, $DSKRECV_INST      # continue
LDN HL, $FETCH
#80
LD Y, $VMS                 # set Y = $VMS on exit
DISHL DZ, PGA              # jump to next VMC
#86
