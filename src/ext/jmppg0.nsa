# Jump page 0 for extended dispatch
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE JMPPG0_PG

#assume A=inst
LD HL, $IDEN$EXTPC
FNDL A, PC                # fork within jump page
#34/4

$EXIT53
MVHL A, NA                # NOP
MVHL A, NA                # NOP
MVHL A, NA                # NOP
MVHL A, NA                # NOP
#69
MVHL A, NA                # NOP
MVHL A, NA                # NOP

# NOP for 2-cycle extended dispatch
ADDR 0x10
NOP
LD HL, $DEC$NULL
LDZ Y, $VMS               # set Y = $VMS on exit
#39|82
FNH DZ, HLD               # VMS-1
LD PG, $FETCH1_PG         # cycle available, goto fetch
#43/20

#COPYROM - init
#0 -> TEMP (X RAM index)
#EREG (ROM page) -> TMPH=ROM number, TMPL=ROM page lsn
ADDR 0x18
LD HL, $0
LD Y, $TEMP
MULH AZ, ND               # 0->temp
#41
LD HL, $NSR$NULL
LDZ Y, $EREG
FNH DZ, HLA               # A=ROM jump PC=0x80+H*8
LD HL, $0x80
LD Y, $TMPH
#51
ANDH AZ, ND               # A&000b->tempH
LD HL, $0x0F
LD Y, $EREG
ANDHL DZ, NA              # A=ROM page lsn
#62
LD HL, $0x80
LD Y, $TMPL
MULH AZ, ND               # A*8->tempL
NOP
#70
NOP
NOP
LD HL, $COPYROM_INST
LD Y, $INST
MVHL AZ, ND               # HL -> inst cache
#80
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#86/42

#BOOTCPU - init copy ROM0/page0
#AREG: CPU number
ADDR 0x44
LD HL, $0xF0
LD Y, $AREG
ORHL DZ, NA               # A=n|0xF0
#42
LD HL, $KERN?$7
ANDL A, X                 # X=0xFn&0x07
LDZ Y, $EO
FNH DZ, HLA               # A=0 if root
#51
LDN PC, $EXIT53           # exit if not kern
LD HL, $IDEN$NULL
LDZ Y, $AREG
FNH D, HLD                # CPU Acc = CPU number
LD HL, $0
#60
LD Y, $CREG
MULH A, ND                # 0->C
LD Y, $DREG
MULH A, ND                # 0->D
#70
LD Y, $EREG
MULH AZ, ND               # 0->E
LD Y, $TEMP
MULH A, ND                # 0->temp
#80
LD Y, $TMPL
MULH A, ND                # 0->tmpL
LD HL, $0x80
LD Y, $TMPH
#89
MVHL A, ND                # 0x80->tmpH
LD HL, $0xFF
LD Y, $PCH
MVHL A, ND
#101
LD Y, $PCL
MVHL A, ND                # 0xFFFF->PC
LD Y, $EXT
#109
MVHL A, ND                # -1->ext mode
LD HL, $COPYROM_INST
LD Y, $INST
MVHL A, ND                # CopyROM->inst cache
#121
LD HL, $FETCH
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#129/74

#YIELD - init temp = context index
ADDR 0x90
LD HL, $IDEN$NULL
LD Y, $INST
FNH AZ, HLD               # yield -> inst cache
#40
LD HL, $IDEN$NULL
LDZ Y, $CTXIDX
FNH DZ, HL                # HL = context index
MVHL A, NA                # NOP
#50
MVHL A, NA                # NOP
MVHL A, NA                # NOP
MVHL A, NA                # NOP
MVHL A, NA                # NOP
LD PC, $EXIT68
#68/22

#RECORD SEND - init E to boundry, temp = -1
ADDR 0xA8
LD Y, $INST
FNH AZ, HLD               # record send -> inst cache
LD HL, $0x80
#40
LD Y, $EREG
ANDHL DZ, ND              # E = E&80
LD PC, $EXIT48
#48/11

#RECORD XFER - init D/E to context, temp = -1
ADDR 0xB8
LD HL, $KERN?$NULL
LDZ Y, $EO
FNH DZ, HLA               # A=0 if root
#40
LDP HL, $XFER_INST        # XFER if kern
LDN HL, $FETCH            # FETCH if not kern
LD Y, $INST
MVHL AZ, ND               # inst -> cache
#49
LD HL, $0xF0
LD Y, $DREG
ORHL DZ, ND               # D|F0 -> D
LD Y, $EREG
#59
ORHL DZ, ND               # E|F0 -> E
LD PC, $EXIT65
#65/25

#RECORD RECV - init temp = -1
ADDR 0xD8
LD Y, $INST
FNH AZ, HLD               # record receive -> inst cache
MVHL A, NA                # NOP
MVHL A, NA                # NOP
LD Y, $EREG
$EXIT48
LDZ HL, $DEC$NULL
FNH DZ, HLD               # E-1
MVHL A, NA                # NOP
MVHL A, NA                # NOP
MVHL A, NA                # NOP
NOP
$EXIT65
NOP
LD HL, $0xFF              # init temp to -1
$EXIT68
LD Y, $TEMP
MVHL AZ, ND               # -1 -> temp
LD HL, $IDEN$NULL
LDZ Y, $INST
FNH DZ, HL                # HL = inst cache
#80
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#86/35
