# Jump page 0 for extended dispatch
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE JMPPG0_PG

#assume A=inst
LD HL, $IDEN$EXTPC
FNDL A, PC                # fork within jump page
#34/4

# NOP for 2-cycle extended dispatch
ADDR 0x04
NOP
LD HL, $DEC$NULL
LDZ Y, $VMS               # set Y = $VMS on exit
#39|82
FNH DZ, HLD               # VMS-1
LD PG, $FETCH1_PG         # cycle available, goto fetch
#43/12

#COPYROM - init
#0 -> TEMP (X RAM index)
#EREG (ROM page) -> TMPH=ROM number, TMPL=ROM page lsn
ADDR 0x0C
LD HL, $0
LD Y, $TEMP
MULH AZ, ND               # 0->temp
#41/6
LD HL, $NSR$NULL
LDZ Y, $EREG
FNH DZ, HLA               # A=ROM jump PC=0x80+H*8
LD HL, $0x80
LD Y, $TMPH
#51/15
ANDH AZ, ND               # A&000b->tempH
LD HL, $0x0F
LD Y, $EREG
ANDHL DZ, NA              # A=ROM page lsn
#62/23
LD HL, $0x80
LD Y, $TMPL
MULH AZ, ND               # A*8->tempL
NOP
#70/30
NOP
NOP
LD HL, $COPYROM_INST
LD Y, $INST
MVHL AZ, ND               # HL -> inst cache
#80/38
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#86/42

#BOOTCPU - init copy ROM0/page0
#AREG: CPU number if kernel
ADDR 0x36
LD HL, $KERN?$NULL
LDZ Y, $EO
FNH DZ, HLA               # A=0 if root
#40/5
LDP Y, $AREG              # kernel: use Acc to set CPU
LDN Y, $CTX0              # user: keep current context
LD HL, $0xF0
ORHL DZ, NA               # A=0xFn
LD HL, $7
#51/15
ANDL A, X                 # X=0xFn&7
LD Y, $AREG
ANDHL A, ND               # CPU Acc = n&0x07
#60/21
LD Y, $IMASK
MULH A, ND                # 0->IMASK
LD Y, $CREG
MULH A, ND                # 0->C
#70/29
LD Y, $DREG
MULH A, ND                # 0->D
LD Y, $TEMP
MULH A, ND                # 0->temp
#80/37
LD Y, $TMPL
MULH A, ND                # 0->tmpL
LD HL, $0x80
LD Y, $TMPH
#89/45
MVHL A, ND                # 0x80->tmpH
LD HL, $0xFF
LD Y, $PCH
MVHL A, ND
#101/53
LD Y, $PCL
MVHL A, ND                # 0xFFFF->PC
LD Y, $EXT
#109/59
MVHL A, ND                # -1->ext mode
LD HL, $COPYROM_INST
LD Y, $INST
MVHL A, ND                # CopyROM->inst cache
#121/67
LD HL, $FETCH
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#129/73

#YIELD - init temp = context index
ADDR 0x80
LD Y, $INST
FNH AZ, HLD               # yield -> inst cache
LD HL, $IDEN$NULL
#40/5
LDZ Y, $CTXIDX
FNH DZ, HL                # HL = context index
MVHL A, NA                # NOP
MVHL A, NA                # NOP
MVHL A, NA                # NOP
$EXIT56
MVHL A, NA                # NOP
MVHL A, NA                # NOP
$EXIT64
MVHL A, NA                # NOP
$EXIT68
LD Y, $TEMP
#70/22
MVHL AZ, ND               # HL -> temp
LD HL, $IDEN$NULL
LDZ Y, $INST
FNH DZ, HL                # HL = inst cache
#80/29
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#86/33

#RECORD XFER - init HL to contexts, temp = -1
ADDR 0xA2
LD HL, $KERN?$NULL
LDZ Y, $EO
FNH DZ, HLA               # A=0 if root
#40/5
LDP HL, $RECXFER_INST     # XFER if kern
LDN HL, $FETCH            # FETCH if not kern
LD Y, $INST
MVHL AZ, ND               # inst -> cache
#49/13
LD HL, $0xF0
LD Y, $HREG
ORHL DZ, ND               # H|F0 -> H
LD Y, $LREG
#59/21
ORHL DZ, ND               # L|F0 -> L
NOP
LD HL, $0xFF
LD PC, $EXIT68
#68/28

#RECORD SEND/RECV - init temp = -1
ADDR 0xC0
LD Y, $INST
FNH AZ, HLD               # record send/recv -> inst cache
LD HL, $ZERO?$NULL
#40/5
LDZ Y, $EREG
FNH DZ, HLA               # E==0?
LDP HL, $DEC$NULL
LDN HL, $IDEN$NULL
LDZ Y, $DREG
FNH DZ, HLD               # D-1 if E==0
#51/15
LD Y, $EREG
LDZ HL, $DEC$NULL
FNH DZ, HLD               # E-1
NOP
NOP
NOP
LD HL, $0xFF              # init temp to -1
LD PC, $EXIT64
#64/27

#ADDR 0xDC
