# Receive message - two bytes per 2-cycle, fetch when done
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE RECV_PG

#HREG: RAM page
#LREG: RAM X index, init 0x7F/0xFF
#TEMP: buffer index, init 0xFF
# assume: Y = $VMS
LD HL, $INC2$FORK3
FNFH DZ, ND            # VMS+2
LD Y, $TMPL
FNFL DZ, PC            # Fork on L
#10

$EXIT78
LD HL, $RECV_INST
#80
LD Y, $VMS             # set Y = $VMS on exit
DISHL DZ, PGA          # jump to next VMC
#86

ADDR 0x20              # L = 254, iden H, inc H
FNH DZ, HLD            # L+2
LD HL, $INC2$IDEN
LD Y, $CTX0
FNFL DZ, X             # X = context col
#19/7
LDZ Y, $TEMP
FNH DZ, HLD            # row = row+2
LDN PC, $EXIT25        # exit at end of buffer
LD HL, $IDEN$DEC
FNFL A, Y              # Y = row-1
#29/16
FNFH D, NA             # A = [Y,X]
LD Y, $TMPL
FNFL DZ, X             # X = L-1
LDZ Y, $HREG
#39/24
FNH DZ, Y              # Y = H
FNFH A, NM             # A->[Y,X]
LD HL, $INC$IDEN
FNH DZ, HLD            # H = H+1         *** inc H ***
LD HL, $IDEN$IDEN
#50/32
LD Y, $CTX0
FNFL DZ, X             # X = context col
LDZ Y, $TEMP
FNH DZ, Y              # Y = row
#59/39
FNFH D, NA             # A = [Y,X]
LD Y, $TMPL
FNFL DZ, X             # X = L
LDZ Y, $HREG
#69/47
FNH DZ, Y              # Y = H
FNFH A, NM             # A->[Y,X]
NOP
NOP
LD PC, $EXIT78
#78/54

ADDR 0x58              # L = 255, inc H, iden H
FNH DZ, HLD            # L+2
LD HL, $INC$IDEN
LDZ Y, $HREG
FNH DZ, HLD            # H = H+1         *** inc H ***
LD HL, $INC2$IDEN
#20/8
LD Y, $CTX0
FNFL DZ, X             # X = context col
LDZ Y, $TEMP
FNH DZ, HLD            # row = row+2
LDN PC, $EXIT31        # exit at end of buffer
#30/17
LD HL, $IDEN$DEC
FNFL A, Y              # Y = row-1
FNFH D, NA             # A = [Y,X]
LD Y, $TMPL
#40/25
FNFL DZ, X             # X = L-1
LDZ Y, $HREG
FNH DZ, Y              # Y = H
FNFH A, NM             # A->[Y,X]
#50/32
LD HL, $IDEN$IDEN
LD Y, $CTX0
FNFL DZ, X             # X = context col
LDZ Y, $TEMP
FNH DZ, Y              # Y = row
#61/41
FNFH D, NA             # A = [Y,X]
LD Y, $TMPL
FNFL DZ, X             # X = L
LDZ Y, $HREG
#71/49
FNH DZ, Y              # Y = H
FNFH A, NM             # A->[Y,X]
LD PC, $EXIT78
#78/54

ADDR 0x90              # L = 0, iden H, iden H
NOP
NOP
$CONT12
FNH DZ, HLD            # L+2
LD HL, $INC2$IDEN
LD Y, $CTX0
FNFL DZ, X             # X = context col
#21/9
LDZ Y, $TEMP
FNH DZ, HLD            # row = row+2
LDN PC, $EXIT27        # exit at end of buffer
LD HL, $IDEN$DEC
FNFL A, Y              # Y = row-1
#31/18
FNFH D, NA             # A = [Y,X]
LD Y, $TMPL
FNFL DZ, X             # X = L-1
LDZ Y, $HREG
#41/26
FNH DZ, Y              # Y = H
FNFH A, NM             # A->[Y,X]
LD HL, $IDEN$IDEN
LD Y, $CTX0
#50/33
FNFL DZ, X             # X = context col
LDZ Y, $TEMP
FNH DZ, Y              # Y = row
FNFH D, NA             # A = [Y,X]
#60/40
LD Y, $TMPL
FNFL DZ, X             # X = L
LDZ Y, $HREG
FNH DZ, Y              # Y = H
#69/47
FNFH A, NM             # A->[Y,X]
NOP
NOP
NOP
NOP
LD PC, $EXIT78
#78/55

ADDR 0xC8              # else, iden H, iden H
LD PC, $CONT12


$EXIT25                # TODO: update Semaphore to mark this CTX dirty?
NOP
NOP
$EXIT27
NOP
NOP
NOP
#30
NOP
$EXIT31
NOP
MVHL A, NA
MVHL A, NA
#40
MVHL A, NA
MVHL A, NA
MVHL A, NA
MVHL A, NA
MVHL A, NA
#60
NOP
LD HL, $INC$NULL       # count this as an idle cycle
LDZ Y, $ICL
FNH DZ, HLD            # ICL+1
LD HL, $ZERO?$NULL
FNH A, HLA             # ICL overflow?
#71
LDP HL, $INC$NULL
LDN HL, $IDEN$NULL
LDZ Y, $ICH
FNH DZ, HLD            # ICH+1 if ICL overflowed
LD HL, $FETCH
#80
LD Y, $VMS             # set Y = $VMS on exit
DISHL DZ, PGA          # jump to next VMC
#86
