# CRC-16, A=data, BC=checksum (with fetch)
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE CRC16_PG

# assume: Y = $VMS
LDZ HL, $0xFA
ADDHL DZ, ND          # state+2, clear ext flag
LD HL, $IDEN$NULL
LDZ Y, $AREG
#10
FNH DZ, HL            # HL=Areg
LD Y, $BREG
XORHL DZ, NA          # A=Areg^Breg
LD HL, $IDEN$CRC16H
#20
LD Y, $TEMP
FNFH AZ, ND	      # index->TEMP
FNCL A, HL            # HL=CRC16H[index]
LD Y, $CREG
#30
XORHL DZ, NA          # A=CRC16H^Creg
LD HL, $IDEN$NULL
LD Y, $BREG
FNFH AZ, ND           # A->Breg
#41
LDZ Y, $TEMP
FNH DZ, HLA	      # A=index
LD HL, $CRC16L$NULL
LD Y, $CREG
#49
FNCH AZ, ND           # CRC16H[index]->Cref
NOP
NOP
NOP
LD HL, $INC$FORK1
LD Y, $PCL
#59
FNFH DZ, XD           # X,PCL = PCL+1
FNDL A, PC
#65

ADDR 0x80
LDZ Y, $PCH
FNH DZ, HLD           # PCH = PCH+1      *** inc PCH ***
LD HL, $IDEN$NULL
#71
FNH A, Y              # Y = PCH
FNFH M, NA            # A = [PC]
LD Y, $INST
FNH AZ, HLD           # A -> inst cache,HL
#80
LD Y, $VMS            # set Y = $VMS on exit
DISHL DZ, PGA         # jump to next VMC
#86

ADDR 0xC0
NOP
NOP
LD HL, $IDEN$NULL
LDZ Y, $PCH
#71
FNH DZ, Y             # Y = PCH
FNFH M, NA            # A = [PC]
LD Y, $INST
FNH AZ, HLD           # A -> inst cache,HL
#80
LD Y, $VMS            # set Y = $VMS on exit
DISHL DZ, PGA         # jump to next VMC
#86
