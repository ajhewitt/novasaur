# H-sync at end of block on fetch1
INCLUDE ../inc/unary.nsa
INCLUDE ../inc/zpage.nsa
INCLUDE ../inc/pages.nsa
PAGE BSYNCF1_PG

# BMODE: column in VID used during block
# VLINE: line(page) in video ram
# VMS: [mode_line][e][cycle count]
#           0,1,2  0  0,1,2,3,4,5
#         3,4,5,6  1  0,1,2,3,4
#        7,8,9,10     0,1,2,3,4
#  11,12,13,14,15     0,1,2,3
# assumes Y=$VMS
LDZ HL, $INCBLK$NULL
FNH DZ, HLD               # H=mode_line start, L=E001
LD Y, $BMODE
VIDH DZ, SA               # mode_line, block mode —> S
#9
LDP HL, $IDEN$IDEN        # sign bit low, don’t inc vline
LDN HL, $INC$IDEN         # sign bit high, inc vline
LD Y, $VLINE
FNFH DZ, VD               # increment? vline —> V
FNFL E, HL                # H = serial inputs
#20
LD Y, $COMLS
COMH DZ, NA               # A = update comms line state
LD HL, $IDEN$NULL
LDZ Y, $COMBS
#29
FNH AZ, HLD               # comms line state -> comms block state
LD HL, $1$MASK2MODE
LD Y, $COMLS
ANDH AZ, ND               # reset ps2 state/data
LD Y, $IMASK
#40
FNEL DZ, HL               # HL = IMODE
LD Y, $IMODE
MVHL AZ, ND               # HL -> IMODE
LD HL, $INC$NULL
#51
LDZ Y, $BLOCK
FNH DZ, HLD               # A,block = block+1
LD HL, $IDEN$NULL
LDZ Y, $MODE
FNH DZ, HL                # H = mode
#61
LD Y, $BMODE
VIDH AZ, ND               # VID(mode,block) -> block mode
LDP PC, $NEXT_FIELD       # jump if block mode zero?
LD HL, $DEC$NULL
LDZ Y, $CBLOCK
#71
FNH DZ, HLD               # context switch block-1
LDN PC, $CTX_SWITCH       # jump if context switch?
NOP
NOP
NOP
NOP
LD HL, $FETCH
#80
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#86

$NEXT_FIELD               #68 - next field, cycle=1
LD HL, $IDEN$NULL
LD Y, $BLOCK
MULH DZ, ND               # 0 -> A,block
LDZ Y, $MODE
FNH DZ, HL                # H = mode
LD Y, $BMODE
#81
VIDH AZ, ND               # VID(mode,block) -> block mode
LD HL, $IDEN$NULL
LD Y, $VSTART
FNFH DZ, NA               # A = vertical start
#91
LD Y, $VLINE
FNH AZ, HLD               # vstart -> vline
LD HL, $INC$NULL
LDZ Y, $FRAME
FNH DZ, HLD               # frame count+1
#101
LDP PC, $KBD_SCAN         # scan keyboard on FRAME 0, cycle=1
LD HL, $DEC$NULL
LDZ Y, $AMODE
FNH DZ, HLA               # negative if AMODE = 0
LDN PC, $EXIT110          # exit if audio off, cycle=1
#109
LD HL, $FETCH
LD Y, $INST
MVHL AZ, ND               # fetch -> inst cache
LD HL, $IDEN$ADSRPG
#119
LD Y, $FRAME
FNEL DZ, PG               # jump to envelope channel, cycle=1
#124

$KBD_SCAN                 #103 - scan keyboard, cycle=1
LD HL, $0x10
LD Y, $TMODE
ORH DZ, ND                # set LSB -> TMODE to stop Tx
#110
LD HL, $FETCH
LD Y, $INST
MVHL AZ, ND               # fetch -> inst cache
LD PG, $RTCE_PG
#120

$CTX_SWITCH               #75 Y=$CBLOCK
LD HL, $99
MVHL AZ, ND               # 99 -> CBLOCK
#81
LD HL, $CTX_SEQ
MVHL A, XA                # X = CTX sequence col
LD HL, $INC$NULL
LDZ Y, $CTXIDX
#91
FNH DZ, HLD               # context switch index+1
LD HL, $IDEN$NULL
FNH A, Y                  # Y = context switch index
FNFH D, NA                # A = next CTX col
LDP PC, $EXIT102          # exit if positive
#101
LD Y, $CTX1
FNH AZ, HLD               # A -> next CTX col
LD Y, $CTX0
XORHL DZ, NA              # A = CTX1 diff CTX0
#111
LD HL, $SWAP$IDEN
FNFL DZ, X                # X = CTX0 col
FNH A, HL                 # H = AL
LD Y, $EO
#120
XORH DZ, ED               # update bank using CTX delta
LD HL, $IDEN$NULL
LD HL, $FETCH
LD Y, $INST
#129
MVHL A, ND                # fetch -> inst in CTX0 col
LDZ Y, $VMS
FNH DZ, HLA               # A = VMS
LD HL, $SWAP$NULL
#139
LD Y, $EXT
FNH A, HLD                # ext bit -> ext sign in CTX0 col
LD HL, $0xD8
LD Y, $HALTMPB
MVHL AZ, ND               # -40 -> CTX SW jump page PC (-40+56=0x10)
#151
LD HL, $0xA0
LD Y, $VMS
ORH DZ, ND                # VMS+ext+2 (cycle=3)
LD HL, $CTXSW_INST
#160
LD Y, $INST
MVHL AZ, ND               # HL -> inst cache
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#172

$EXIT102
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
#110
$EXIT110
NOP
NOP
NOP
NOP
NOP
LD HL, $INC$NULL
LDZ Y, $VMS
#119
FNH DZ, HLD               # VMS+1 (cycle=2)
LD HL, $FETCH
LD Y, $VMS                # set Y = $VMS on exit
DISHL DZ, PGA             # jump to next VMC
#129
